
package network;

import com.rbnb.sapi.*;
import java.util.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class source {

	private Source source;
	private ChannelMap cMap;

	private parsexml xmlparser; // xmlparser object

	private Vector<Vector<Integer>> channelindexes; // container to hold seperate channel indexes for RDV sink.

	public source(String tlm)  // Constructor
	{
		try
		{
			source=new Source();  // create source
			source.OpenRBNBConnection("localhost:3333", tlm); // connect to rbnb
			cMap = new ChannelMap(); // create channel map

			xmlparser = new parsexml(); // create that object for parsing xml files.
			xmlparser.parse(); // creating parameter containers from xml files
			xmlparser.print(); // print parameters

			channelindexes = new Vector<Vector<Integer>>();

			createchannels();  // creating seperate channels from parser


		}

		catch (SAPIException se) { se.printStackTrace(); }

	}

	void createchannels() // create channels for RDV sink
	{

		int i,j;


		for(i=0 ; i < (xmlparser.get_foldernames()).size(); i++)
		{
			Vector<Integer> indexes = new Vector<Integer>();
			for(j=0 ; j < ((xmlparser.get_parameternames()).get(i)).size() ; j++)
			{
				try
				{
					indexes.addElement(cMap.Add((xmlparser.get_foldernames()).get(i) + "/" + ((xmlparser.get_parameternames()).get(i)).get(j)));
				}
				catch (SAPIException se) { se.printStackTrace(); }
			}

			channelindexes.addElement(indexes);

		}

	}

	long ByteArrayToInt(byte[] bytes) {
		return (long)(bytes[0] << 24 | (bytes[1] & 0xFF) << 16 | (bytes[2] & 0xFF) << 8 | (bytes[3] & 0xFF));
	}

	int ByteArrayToShort(byte[] bytes) {
		return (int) (bytes[0] << 8 | (bytes[1] & 0xFF) << 0);
	}

	char ByteArrayToChar(byte[] bytes) {
		return  (char) (bytes[0]);
	}

	public void send(byte[] rawdata , int app_id)   //send data to rbnb server
	{
		int pointer = 0;
		int i = 0;
		boolean available = false;


		for(; i < xmlparser.get_applicationids().size(); i++)
		{
			if(xmlparser.get_applicationids().get(i) == app_id){
				available = true;
				break;
			}		
		}

		if(available){

			for(int j = 0; j < xmlparser.get_parametertypes().get(i).size(); j++)
			{
				if(xmlparser.get_parametertypes().get(i).get(j).equals("S8") || xmlparser.get_parametertypes().get(i).get(j).equals("U8")) // U8 & S8
				{
					try
					{			
						short[] array = new short[1];
						array[0] =  (short)((byte)rawdata[pointer] & xmlparser.get_parametermasks().get(i).get(j));
						cMap.PutDataAsInt16(channelindexes.get(i).get(j),array);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
						pointer++;
					}
					catch (SAPIException se) { se.printStackTrace(); }

				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("S16") || xmlparser.get_parametertypes().get(i).get(j).equals("U16")) //S16 & U16
				{			
					try
					{
						int[] array = new int[1];
						array[0] = (int)(((int)((int)rawdata[pointer] << 8 | (int)rawdata[pointer+1] << 0)  & xmlparser.get_parametermasks().get(i).get(j)));
						cMap.PutDataAsInt32(channelindexes.get(i).get(j),array);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
						pointer = pointer + 2;
					}
					catch (SAPIException se) { se.printStackTrace(); }
				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("S32") || xmlparser.get_parametertypes().get(i).get(j).equals("U32")) //S32 & U32
				{
					try
					{
						long[] array = new long[1];
						array[0] = (long)(((long)((long)rawdata[pointer] << 24 | (long)rawdata[pointer+1] << 16| (long)rawdata[pointer+2] << 8| (long)rawdata[pointer+3] << 0)  & xmlparser.get_parametermasks().get(i).get(j)));
						cMap.PutDataAsInt64(channelindexes.get(i).get(j),array);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
						pointer = pointer + 4;
					}
					catch (SAPIException se) { se.printStackTrace(); }
				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("TIME") ) // TIME
				{
					pointer = pointer + 6;
				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("STRING") ) // STRING
				{
					String str = "";
					for(int k = 0 ; k < xmlparser.get_parametersizes().get(i).get(j) ; k++)
					{
						char c = (char) (rawdata[pointer]  & xmlparser.get_parametermasks().get(i).get(j));
						str = str + c ;
						pointer++;
					}

					try
					{
						cMap.PutDataAsString(channelindexes.get(i).get(j) , str);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
					}
					catch (SAPIException se) { se.printStackTrace(); }
				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("FLOAT") ) // FLOAT
				{
					float[] array = new float[1];
					byte[] bytes = { rawdata[pointer] , rawdata[pointer + 1] , rawdata[pointer + 2] , rawdata[pointer + 3]};
					array[0] = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN).getFloat();

					try
					{
						cMap.PutDataAsFloat32(channelindexes.get(i).get(j),array);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
						pointer = pointer + 4;
					}
					catch (SAPIException se) { se.printStackTrace(); }

				}

				else if(xmlparser.get_parametertypes().get(i).get(j).equals("DOUBLE") ) // DOUBLE
				{

					double[] array = new double[1];
					byte[] bytes = { rawdata[pointer] , rawdata[pointer + 1] , rawdata[pointer + 2] , rawdata[pointer + 3] , rawdata[pointer + 4] , rawdata[pointer + 5] , rawdata[pointer + 6] , rawdata[pointer + 7]};
					array[0] = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN).getDouble();

					try
					{
						cMap.PutDataAsFloat64(channelindexes.get(i).get(j),array);
						//cMap.PutUserInfo(channelindexes.get(i).get(j) , xmlparser.get_parameterinfos().get(i).get(j));
						source.Flush(cMap);
						pointer = pointer + 8;
					}
					catch (SAPIException se) { se.printStackTrace(); }

				}

				else
				{
					System.out.println("not found");
				}

			} 
		}
	}
}