<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_02) on Tue Feb 21 13:58:16 PST 2012 -->
<title>PlugInTemplate</title>
<meta name="date" content="2012-02-21">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="PlugInTemplate";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/PlugInTemplate.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/rbnb/plugins/PlugInRecorder.html" title="class in com.rbnb.plugins"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/rbnb/plugins/PlugInTemplate.html" target="_top">Frames</a></li>
<li><a href="PlugInTemplate.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">com.rbnb.plugins</div>
<h2 title="Class PlugInTemplate" class="title">Class PlugInTemplate</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>com.rbnb.plugins.PlugInTemplate</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public abstract class <span class="strong">PlugInTemplate</span>
extends java.lang.Object</pre>
<div class="block">An abstract base class that simplifies PlugIn development.
 <p>Most plug-in implementations will only need to overload the 
 <a href="../../../com/rbnb/plugins/PlugInTemplate.html#processRequest(com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>processRequest(ChannelMap, PlugInChannelMap )</code></a> method in order to
  have a fully functional plug-in.
 <p>Other overloadable functions:
 <ul>
      <li><a href="../../../com/rbnb/plugins/PlugInTemplate.html#createForwardMap(com.rbnb.sapi.PlugInChannelMap)"><code>createForwardMap(PlugInChannelMap)</code></a> -- create the 
            ChannelMap used to forward requests for data to process, </li>
      <li><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getForwardData(com.rbnb.sapi.Sink, com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>getForwardData(Sink, ChannelMap, PlugInChannelMap)</code></a>
            -- makes the forwarded request using the given sink and map.</li>
      <li><a href="../../../com/rbnb/plugins/PlugInTemplate.html#processRegistrationRequest(com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>processRegistrationRequest(ChannelMap, PlugInChannelMap)</code></a>
            -- handles registration requests in case channel names or mime
               types need to be changed, or server XML meta-data needs to
               be generated.</li>
 </ul></div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#addChannelToRegister(java.lang.String)">addChannelToRegister</a></strong>(java.lang.String&nbsp;channel)</code>
<div class="block">Add a channel to be registered with the server for this PlugIn.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getForwardRequestData()">getForwardRequestData</a></strong>()</code>
<div class="block">If true, the data from incoming requests is forwarded to the sink
   to get matching data for processing.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getForwardRequests()">getForwardRequests</a></strong>()</code>
<div class="block">If true, incoming requests are automatically forwarded to the sink
  to get matching data for processing.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getHost()">getHost</a></strong>()</code>
<div class="block">The RBNB hostname:port.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getName()">getName</a></strong>()</code>
<div class="block">The client name used for this PlugIn in the RBNB.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getPassword()">getPassword</a></strong>()</code>
<div class="block">Password used in connecting to the RBNB.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.Properties</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getRequestOptions()">getRequestOptions</a></strong>()</code>
<div class="block">Gives a Properties object, which represents the options set
   by the Sink for this PlugIn when the request was made.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/rbnb/sapi/Sink.html" title="class in com.rbnb.sapi">Sink</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getRequestSink()">getRequestSink</a></strong>()</code>
<div class="block">For sinks where the default request forwarding approach is 
  inappropriate, this method may be used to get a handle to a
  Sink to make requests.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>long</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getTimeout()">getTimeout</a></strong>()</code>
<div class="block">Timeout (in ms) used in calls to Fetch().</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getUseOneSink()">getUseOneSink</a></strong>()</code>
<div class="block">If true, one sink is used to get all forwarding data.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getUser()">getUser</a></strong>()</code>
<div class="block">Username used in connecting to the RBNB.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.Class</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getUserRequestClass()">getUserRequestClass</a></strong>()</code>
<div class="block">Returns the class whose instances are created to help answer requests.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.Object</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#getUserRequestObject()">getUserRequestObject</a></strong>()</code>
<div class="block">If the user request class has been set, and we are inside a callback
  such as <a href="../../../com/rbnb/plugins/PlugInTemplate.html#processRequest(com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>processRequest(ChannelMap, PlugInChannelMap)</code></a>,
  then this method returns an 
  instance of the user request class.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#isRunning()">isRunning</a></strong>()</code>
<div class="block">Returns true if this PlugIn is currently answering requests.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setForwardRequestData(boolean)">setForwardRequestData</a></strong>(boolean&nbsp;forwardRequestData)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setForwardRequests(boolean)">setForwardRequests</a></strong>(boolean&nbsp;forwardRequests)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setHost(java.lang.String)">setHost</a></strong>(java.lang.String&nbsp;host)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setName(java.lang.String)">setName</a></strong>(java.lang.String&nbsp;name)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setPassword(java.lang.String)">setPassword</a></strong>(java.lang.String&nbsp;pass)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setTimeout(long)">setTimeout</a></strong>(long&nbsp;timeout)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setUseOneSink(boolean)">setUseOneSink</a></strong>(boolean&nbsp;oneSink)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setUser(java.lang.String)">setUser</a></strong>(java.lang.String&nbsp;user)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setUserRequestClass(java.lang.Class)">setUserRequestClass</a></strong>(java.lang.Class&nbsp;userClass)</code>
<div class="block">Set the class used to help answer requests.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#start()">start</a></strong>()</code>
<div class="block">Starts the PlugIn in another thread, returning execution 
  to the current thread.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/rbnb/plugins/PlugInTemplate.html#stop()">stop</a></strong>()</code>
<div class="block">Stops the PlugIn thread.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="start()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>start</h4>
<pre>public final&nbsp;void&nbsp;start()
                 throws <a href="../../../com/rbnb/sapi/SAPIException.html" title="class in com.rbnb.sapi">SAPIException</a></pre>
<div class="block">Starts the PlugIn in another thread, returning execution 
  to the current thread.  Any threads waiting on <code>this</code>
  are notified.</div>
<dl><dt><span class="strong">Throws:</span></dt>
<dd><code><a href="../../../com/rbnb/sapi/SAPIException.html" title="class in com.rbnb.sapi">SAPIException</a></code> - if a connection error occurs.</dd></dl>
</li>
</ul>
<a name="stop()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>stop</h4>
<pre>public final&nbsp;void&nbsp;stop()</pre>
<div class="block">Stops the PlugIn thread.
 <p>Any threads waiting on this are notified.</div>
</li>
</ul>
<a name="isRunning()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isRunning</h4>
<pre>public final&nbsp;boolean&nbsp;isRunning()</pre>
<div class="block">Returns true if this PlugIn is currently answering requests.</div>
</li>
</ul>
<a name="getHost()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getHost</h4>
<pre>public final&nbsp;java.lang.String&nbsp;getHost()</pre>
<div class="block">The RBNB hostname:port.  The default is "localhost:3333".</div>
</li>
</ul>
<a name="setHost(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setHost</h4>
<pre>public final&nbsp;void&nbsp;setHost(java.lang.String&nbsp;host)</pre>
</li>
</ul>
<a name="getName()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getName</h4>
<pre>public final&nbsp;java.lang.String&nbsp;getName()</pre>
<div class="block">The client name used for this PlugIn in the RBNB.  The default is
  getClass().getName().</div>
<dl><dt><span class="strong">See Also:</span></dt><dd><code>Class.getName()</code></dd></dl>
</li>
</ul>
<a name="setName(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setName</h4>
<pre>public final&nbsp;void&nbsp;setName(java.lang.String&nbsp;name)</pre>
</li>
</ul>
<a name="getUser()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUser</h4>
<pre>public final&nbsp;java.lang.String&nbsp;getUser()</pre>
<div class="block">Username used in connecting to the RBNB.  Default is null.</div>
</li>
</ul>
<a name="setUser(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUser</h4>
<pre>public final&nbsp;void&nbsp;setUser(java.lang.String&nbsp;user)</pre>
</li>
</ul>
<a name="getPassword()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPassword</h4>
<pre>public final&nbsp;java.lang.String&nbsp;getPassword()</pre>
<div class="block">Password used in connecting to the RBNB.  Default is null.</div>
</li>
</ul>
<a name="setPassword(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setPassword</h4>
<pre>public final&nbsp;void&nbsp;setPassword(java.lang.String&nbsp;pass)</pre>
</li>
</ul>
<a name="addChannelToRegister(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addChannelToRegister</h4>
<pre>public final&nbsp;void&nbsp;addChannelToRegister(java.lang.String&nbsp;channel)</pre>
<div class="block">Add a channel to be registered with the server for this PlugIn.
 If never called, no channels are registered.  This allows for 
  dynamic registration.</div>
<dl><dt><span class="strong">Throws:</span></dt>
<dd><code>java.lang.IllegalArgumentException</code> - if the channel is invalid.</dd></dl>
</li>
</ul>
<a name="getTimeout()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getTimeout</h4>
<pre>public final&nbsp;long&nbsp;getTimeout()</pre>
<div class="block">Timeout (in ms) used in calls to Fetch().  The default is -1
   (forever).</div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/rbnb/sapi/PlugIn.html#Fetch(long)"><code>PlugIn.Fetch(long)</code></a>, 
<a href="../../../com/rbnb/sapi/Sink.html#Fetch(long)"><code>Sink.Fetch(long)</code></a></dd></dl>
</li>
</ul>
<a name="setTimeout(long)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setTimeout</h4>
<pre>public final&nbsp;void&nbsp;setTimeout(long&nbsp;timeout)</pre>
</li>
</ul>
<a name="getUseOneSink()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUseOneSink</h4>
<pre>public final&nbsp;boolean&nbsp;getUseOneSink()</pre>
<div class="block">If true, one sink is used to get all forwarding data.  Otherwise,
  one sink is used per thread created to handle an incoming request.
 <p>The default is false.</div>
</li>
</ul>
<a name="setUseOneSink(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUseOneSink</h4>
<pre>public final&nbsp;void&nbsp;setUseOneSink(boolean&nbsp;oneSink)</pre>
</li>
</ul>
<a name="getForwardRequests()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getForwardRequests</h4>
<pre>public final&nbsp;boolean&nbsp;getForwardRequests()</pre>
<div class="block">If true, incoming requests are automatically forwarded to the sink
  to get matching data for processing.  This is the typical usage for
  filter plug-ins that process data already in the RBNB to produce
  new data.

 <p>Other plug-ins generate their own data internally, or want to handle
  forwarding themselves; they should set this field to false.

 <p>The default is true.</div>
</li>
</ul>
<a name="setForwardRequests(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setForwardRequests</h4>
<pre>public final&nbsp;void&nbsp;setForwardRequests(boolean&nbsp;forwardRequests)</pre>
</li>
</ul>
<a name="getForwardRequestData()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getForwardRequestData</h4>
<pre>public final&nbsp;boolean&nbsp;getForwardRequestData()</pre>
<div class="block">If true, the data from incoming requests is forwarded to the sink
   to get matching data for processing.
  Otherwise, the forwarded request contains only the channel names.
 <p>The default is true.</div>
</li>
</ul>
<a name="setForwardRequestData(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setForwardRequestData</h4>
<pre>public final&nbsp;void&nbsp;setForwardRequestData(boolean&nbsp;forwardRequestData)</pre>
</li>
</ul>
<a name="getUserRequestClass()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUserRequestClass</h4>
<pre>public final&nbsp;java.lang.Class&nbsp;getUserRequestClass()</pre>
<div class="block">Returns the class whose instances are created to help answer requests.
  The default is null.</div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/rbnb/plugins/PlugInTemplate.html#setUserRequestClass(java.lang.Class)"><code>setUserRequestClass(Class)</code></a></dd></dl>
</li>
</ul>
<a name="setUserRequestClass(java.lang.Class)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUserRequestClass</h4>
<pre>public final&nbsp;void&nbsp;setUserRequestClass(java.lang.Class&nbsp;userClass)</pre>
<div class="block">Set the class used to help answer requests. 
  One instance of this class will be created each time a thread is 
  created to handle an incoming PlugIn request.  This instance can
  be recovered from inside these threads using 
  <a href="../../../com/rbnb/plugins/PlugInTemplate.html#getUserRequestObject()"><code>getUserRequestObject()</code></a>.
 <p>The class should have either a single argument constructor which
   takes an instance of PlugInTemplate, or failing that 
   a no-argument constructor. 
 <p>This object is typically used to store references to objects
  which are expensive to create and non-reentrant, 
  to give a performance improvement
  over creating them each time 
  <a href="../../../com/rbnb/plugins/PlugInTemplate.html#processRequest(com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>processRequest(ChannelMap, PlugInChannelMap)</code></a> is called.</div>
</li>
</ul>
<a name="getUserRequestObject()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getUserRequestObject</h4>
<pre>public final&nbsp;java.lang.Object&nbsp;getUserRequestObject()</pre>
<div class="block">If the user request class has been set, and we are inside a callback
  such as <a href="../../../com/rbnb/plugins/PlugInTemplate.html#processRequest(com.rbnb.sapi.ChannelMap, com.rbnb.sapi.PlugInChannelMap)"><code>processRequest(ChannelMap, PlugInChannelMap)</code></a>,
  then this method returns an 
  instance of the user request class.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The user request object instance of the current thread, or null.</dd></dl>
</li>
</ul>
<a name="getRequestSink()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getRequestSink</h4>
<pre>public final&nbsp;<a href="../../../com/rbnb/sapi/Sink.html" title="class in com.rbnb.sapi">Sink</a>&nbsp;getRequestSink()
                          throws <a href="../../../com/rbnb/sapi/SAPIException.html" title="class in com.rbnb.sapi">SAPIException</a></pre>
<div class="block">For sinks where the default request forwarding approach is 
  inappropriate, this method may be used to get a handle to a
  Sink to make requests.  These calls must be made inside one of the
  callback methods of this class.
 <p><strong>NOTE:</strong> If the useOneSink property is true, 
  you should synchronize on the Sink object returned by this method.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The Sink instance for the current thread,</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="../../../com/rbnb/sapi/SAPIException.html" title="class in com.rbnb.sapi">SAPIException</a></code> - if the sink is new and needs to be connected,
  but failed.</dd></dl>
</li>
</ul>
<a name="getRequestOptions()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getRequestOptions</h4>
<pre>public final&nbsp;java.util.Properties&nbsp;getRequestOptions()</pre>
<div class="block">Gives a Properties object, which represents the options set
   by the Sink for this PlugIn when the request was made.  Note that
   calls to this function must be made inside one of the callback
   methods of this class.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/PlugInTemplate.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/rbnb/plugins/PlugInRecorder.html" title="class in com.rbnb.plugins"><span class="strong">Prev Class</span></a></li>
<li>Next Class</li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/rbnb/plugins/PlugInTemplate.html" target="_top">Frames</a></li>
<li><a href="PlugInTemplate.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
